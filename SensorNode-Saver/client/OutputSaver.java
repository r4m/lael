/*
 * Copyright (c) 2010, Department of Information Engineering, University of Padova.
 * All rights reserved.
 *
 * This file is part of Lael.
 *
 * Lael is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * Lael is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Lael.  If not, see <http://www.gnu.org/licenses/>.
 *
 * ===================================================================================
 */

/**
 *
 * This is the application of the user interface. It shows the payload of the packages
 * sent by a single node and save the data to TXT files.
 * The payload contains this informations:
  * >> Sensor:
 * [ID]         	identification number of the sensor
 * [#Pkg]      		package number
 * [Temperature(°C)]	temperature
 * [Humidity(%RH)]   	humidity
 * [PAR (Lux)]		PAR
 * [TSR t(Lux)]		TSR
 * >> Radio:
 * [ID]         	identification number of the sensor
 * [Counter]  		identification number of the packet
 * [RSSI(dBm)]	    received signal strength indicator
 * [RSS(dBm)]	    received signal strength
 * [LQI]   			link quality indicator
 * [Channel]		transmission channel
 * [Power]			transmission power
 * See the help of this program calling java OutputSaver -h
 *
 * @date 26/07/2010 18:14
 * @author Filippo Zanella <filippo.zanella@dei.unipd.it>
 */

import java.io.*;
import java.lang.Math;
import net.tinyos.message.Message;
import net.tinyos.message.MessageListener;
import net.tinyos.message.MoteIF;
import net.tinyos.message.SerialPacket;
import net.tinyos.packet.BuildSource;
import net.tinyos.packet.PhoenixSource;
import net.tinyos.util.PrintStreamMessenger;
import java.util.Calendar;

public class OutputSaver implements MessageListener
{
	private MoteIF mote;

	private Sensors sensorsMsg;
	private Radio radioMsg;
	public FileOutputStream outputFileSensors;
	public FileOutputStream outputFileRadio;
	public PrintStream outputSensors;
	public PrintStream outputRadio;

	private Calendar cal;

	double temperature;
	double humidity;
	double humidity_true;
	double par;
	double tsr;
	//double voltage;

	static double V_REF = 1.5;

	int rssi;
	int rss;
	int lqi;
	int channel;
	int power;
	
	public OutputSaver(MoteIF mif, String file, String source) {
		try
		{
			outputFileSensors = new FileOutputStream(file + "_sensor.txt");
			outputSensors = new PrintStream(outputFileSensors);
			outputSensors.println("##File generated by OutputSaver ##");
			String curTime = (Calendar.getInstance().getTime()).toString();
			outputSensors.println(curTime);
			outputSensors.println("");
			output.println("[ID]\t[#Pkg]\t[Temperature(°C)]\t[Humidity(%RH)]\t[Humidity[true](%RH)]\t[PAR(Lux)]\t[TSR(Lux)]");
			outputSensors.println("");

			outputFileRadio = new FileOutputStream(file + "_radio.txt");
			outputRadio = new PrintStream(outputFileRadio);
			outputRadio.println("##File generated by OutputSaver ##");
			outputRadio.println(curTime);
			outputRadio.println("");
			outputRadio.println("[ID]\t[#Pkg]\t[Time(ms)]\t[RSS(dBm)]\t[RSSI(dBm)]\t[LQI]\t[Channel]\t[Power]");
			outputRadio.println("");

			System.out.println("Copyright (c) 2010, Department of Information Engineering, University of Padova.");
			System.out.println("");
			System.out.print("Connecting to serial port...");

			mote = mif;

			mote.registerListener(new Sensors(), this);
			mote.registerListener(new Radio(), this);
		}
		catch (IOException ioex) {
			System.err.println("Exception thrown when creating a file. Exiting.");
			System.err.println(ioex);
		}
		catch (Exception ex) {
			System.err.println("Couldn't contact serial port.");
			System.err.println(ex);
		}
		System.out.println("done.");
		System.out.println("Connected with " + source +  ".");
		System.out.println("OutputSaver started.");
	}

	synchronized public void messageReceived(int dest, Message m) {

		if(m instanceof Sensors) {
			sensorsMsg = (Sensors) m;

			//voltage = (double)sensorsMsg.get_voltage() / (double)4096 * (2 * V_REF);

			//temperature = -38.4 + 0.0098 * sensorsMsg.get_temperature();		
			temperature = -39.6 + 0.01 * (double)sensorsMsg.get_temperature();

			//humidity = -4  + 0.0405*(double)sensorsMsg.get_humidity() - (double)0.0000028*sensorsMsg.get_humidity()*sensorsMsg.get_humidity();
			humidity = -2.0468 + 0.0367*(double)sensorsMsg.get_humidity() - (double)1.5955e-6*sensorsMsg.get_humidity()*sensorsMsg.get_humidity();
			
			humidity_true = (temperature - 25) * (0.01 + 0.00008*sensorsMsg.get_humidity()) + humidity;
			
			double I_par = ((double)sensorsMsg.get_par() / 4096 * V_REF) / 100000; 
			par = 0.625 * 1e6 * I_par * 1000;

			double I_tsr = ((double)sensorsMsg.get_tsr() / 4096 * V_REF) / 100000; 
			tsr = 0.769 * 1e5 * I_tsr * 1000;

			System.out.println("ID: " + cutNumber(id,5));
			System.out.println("#Pkg: " + cutNumber(counter,5));
			//System.out.println("Voltage: " + cutNumber(voltage,4) + " [V]");
			System.out.println("Temperature: " + cutNumber(temperature,6) + " [C]");
			System.out.println("Humidity: " + cutNumber(humidity,6) + " [%RH]");
			System.out.println("Humidity (real): " + cutNumber(humidity_true,6) + " [%RH]");
			System.out.println("PAR: " + cutNumber(par,6) + " [Lux]");
			System.out.println("TSR: " + cutNumber(tsr,6) + " [Lux]");
			try												
			{
			output.println(sensorsMsg.get_id() + "\t" + sensorsMsg.get_counter() + "\t\t" + cutNumber(temperature,5)
				+ "\t\t" + cutNumber(humidity,5) + "\t\t" + cutNumber(humidity_true,5)
				+ "\t\t" + cutNumber(par,5) + "\t\t" + cutNumber(tsr,5));
			}
			catch (Exception e) {
				System.err.println("Exception thrown when writing the outputs. Exiting.");
				System.err.println(e);
			}
		}

		if(m instanceof Radio) {
			radioMsg = (Radio) m;

			rssi = radioMsg.get_rssi();
			rss = radioMsg.get_rss();
			channel = radioMsg.get_channel();
			power = radioMsg.get_power();
			lqi = radioMsg.get_lqi();
			
			long curTime = (Calendar.getInstance()).getTimeInMillis()/1000;

			System.out.println("ID: " + cutNumber(id,5));
			System.out.println("#Pkg: " + cutNumber(counter,5));
			System.out.println("RSSI: " + cutNumber(rssi,5) + " [dBm]");
			System.out.println("RSS: " + cutNumber(rss,5) + " [dBm]");
			System.out.println("LQI: " + cutNumber(lqi,5));
			System.out.println("Channel: " + cutNumber(channel,5));
			System.out.println("Power: " + cutNumber(power,5));

			try												
			{
				outputRadio.println(radioMsg.get_id() + "\t" + radioMsg.get_counter() + "\t" + curTime + "\t" + rss
					+ "\t" + rssi + "\t" + lqi + "\t" + channel + "\t" + power);
			}		
			catch (Exception e) {
				System.err.println("Exception thrown when writing the outputs. Exiting.");
				System.err.println(e);
			}
		}
	}

	public String cutNumber(double str, int pos) {
		String s = str + "";
		if(pos>s.length())
			pos = s.length();
		return s.substring(0,pos);
	}

	private static void usage() {
		System.err.println("usage: OutputSaver [options] [-comm SOURCE] [-f FILE]");
		System.err.println("options:");
		System.err.println("-h\t\t Show this help");
		System.err.println("[-comm SOURCE]\t Set the serial source connection");
		System.err.println("[-f FILE]\t Save the data to a <FILE>.txt");
		System.err.println("");
		System.err.println("The default command is: OutputSaver -comm serial@/dev/ttyUSB0:tmote -f data");
	}

	public static void main(String[] args) {
		String  source = "serial@/dev/ttyUSB0:tmote";
		String  file = "dati";

		if(args.length == 1) {
			if (!args[0].equals("-h")) {
				usage();
				System.exit(1);
			}
		}
		if (args.length == 2) {
			if (!args[0].equals("-comm")) {
				usage();
				System.exit(1);
			}
			source = args[1];
		}
		else if (args.length == 4) {
			if (!args[0].equals("-comm")) {
				usage();
				System.exit(1);
			}
			source = args[1];
			file = args[3];
		}
		else if (args.length != 0) {
			usage();
			System.exit(1);
		}

		PhoenixSource phoenix;

		if (source == null) {
			phoenix = BuildSource.makePhoenix(PrintStreamMessenger.err);
		}
		else {
			phoenix = BuildSource.makePhoenix(source, PrintStreamMessenger.err);
		}

		MoteIF mif = new MoteIF(phoenix);
		new OutputSaver(mif,file,source);
	}
}
